version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: datamanagement_postgres
    environment:
      POSTGRES_DB: datamanagement_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - datamanagement_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d datamanagement_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: datamanagement_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - datamanagement_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: datamanagement_backend
    environment:
      - PORT=8080
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=datamanagement_db
      - DB_SSL_MODE=disable
      - JWT_SECRET=your-production-jwt-secret-key-minimum-32-characters
      - ENCRYPTION_KEY=your-production-encryption-key-32
      - TOKEN_EXPIRY=15
      - REFRESH_EXPIRY=7
      - MAX_LOGIN_ATTEMPTS=5
      - BLOCKCHAIN_ENABLED=true
      - ALLOWED_ORIGIN_1=http://localhost:3000
      - ALLOWED_ORIGIN_2=http://localhost:8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - datamanagement_network
    restart: unless-stopped
    volumes:
      - ./storage:/app/storage
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: datamanagement_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployments/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./deployments/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - datamanagement_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  datamanagement_network:
    driver: bridge
